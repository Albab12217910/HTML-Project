calculator...

#!/bin/bash

read -p "enter your number 1 :- " a
read -p "enter your number 2 :- " b

echo "1.Add"
echo "2.Sub"
echo "3.multi"
echo "4.Div"

read n
case $n in
1) echo `expr $a + $b`
;;
2) echo `expr $a - $b`
;;
3) echo `expr $a * $b`
;;
4) echo `expr $a / $b`
;;
esac
-----------------------------------------------------------------
table

#!/bin/bash

read -p "enter the no. " n

i=1
while [ $i -le 10 ]
do 
b=`expr $n \* $i`

echo  "$n * $i = $b"
((++i))

done
---------------------------------------------------------------------
prime

#!/bin/bash

echo "Enter the limit:"
read limit

echo "Prime numbers up to $limit are:"

for (( num=2; num<=limit; num++ ))
do
    is_prime=true

    for (( i=2; i<num; i++ ))
    do
        if [ $((num % i)) -eq 0 ]
        then
            is_prime=false
            break
        fi
    done

    if [ $is_prime == true ]
    then
        echo $num
    fi
done
----------------------------------------------------------------------------
programe to simulate race condition

#include <stdio.h>
#include <pthread.h>

int shared_variable = 0;

void *increment(void *arg) {
    for (int i = 0; i < 100000; i++) {
        shared_variable++;
    }
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    // Create two threads
    pthread_create(&thread1, NULL, increment, NULL);
    pthread_create(&thread2, NULL, increment, NULL);

    // Wait for the threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    // Display the final value of the shared variable
    printf("The value of the shared variable is: %d\n", shared_variable);

    return 0;
}
-----------------------------------------------------------------------------
programm to remove race condition

#include <stdio.h>
#include <pthread.h>

int shared_variable = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void *increment(void *arg) {
    for (int i = 0; i < 100000; i++) {
        pthread_mutex_lock(&mutex); // Lock the mutex before modifying the shared variable
        shared_variable++;
        pthread_mutex_unlock(&mutex); // Unlock the mutex after modifying the shared variable
    }
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    // Create two threads
    pthread_create(&thread1, NULL, increment, NULL);
    pthread_create(&thread2, NULL, increment, NULL);

    // Wait for the threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    // Display the final value of the shared variable
    printf("The value of the shared variable is: %d\n", shared_variable);

    return 0;
}
---------------------------------------------------------------------------------
program to implement the ipc using named pipe.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define FIFO_PATH "my_fifo"

int main() {
    // Create a named pipe (FIFO)
    mkfifo(FIFO_PATH, 0666);

    // Fork a child process
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) {
        // Parent process (Writer)

        // Open the named pipe for writing
        int fd = open(FIFO_PATH, O_WRONLY);

        // Write data to the named pipe
        char message[] = "Hello from Parent!";
        write(fd, message, sizeof(message));

        // Close the file descriptor
        close(fd);
    } else {
        // Child process (Reader)

        // Open the named pipe for reading
        int fd = open(FIFO_PATH, O_RDONLY);

        // Read data from the named pipe
        char buffer[100];
        read(fd, buffer, sizeof(buffer));

        // Display the received message
        printf("Child received: %s\n", buffer);

        // Close the file descriptor
        close(fd);
    }

    // Remove the named pipe
    unlink(FIFO_PATH);

    return 0;
}
-------------------------------------------------------------------------
program to implement the ipc using message passing technique.

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MSG_TYPE 1

struct message {
    long mtype;
    char mtext[100];
};

int main() {
    key_t key = ftok(".", 'a'); // Generate a key for the message queue

    // Create a message queue
    int msgid = msgget(key, IPC_CREAT | 0666);

    // Fork a child process
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) {
        // Parent process (Message Sender)

        struct message msg;
        msg.mtype = MSG_TYPE;
        sprintf(msg.mtext, "Hello from Parent!");

        // Send the message to the queue
        msgsnd(msgid, &msg, sizeof(msg.mtext), 0);
    } else {
        // Child process (Message Receiver)

        struct message msg;

        // Receive the message from the queue
        msgrcv(msgid, &msg, sizeof(msg.mtext), MSG_TYPE, 0);

        // Display the received message
        printf("Child received: %s\n", msg.mtext);
    }

    // Remove the message queue
    msgctl(msgid, IPC_RMID, NULL);

    return 0;
}
----------------------------------------------------------------------------------
program to implement the ipc using message queue technique.

#include <stdio.h>
#include <stdlib.h>
#include <mqueue.h>

#define QUEUE_NAME "/my_queue"
#define MAX_MSG_SIZE 100

int main() {
    // Message queue attributes
    struct mq_attr attr;
    attr.mq_flags = 0;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = MAX_MSG_SIZE;
    attr.mq_curmsgs = 0;

    // Create a message queue
    mqd_t mq = mq_open(QUEUE_NAME, O_CREAT | O_RDWR, 0666, &attr);

    // Fork a child process
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) {
        // Parent process (Message Sender)

        char message[] = "Hello from Parent!";

        // Send the message to the queue
        mq_send(mq, message, sizeof(message), 0);
    } else {
        // Child process (Message Receiver)

        char buffer[MAX_MSG_SIZE];

        // Receive the message from the queue
        mq_receive(mq, buffer, MAX_MSG_SIZE, NULL, NULL);

        // Display the received message
        printf("Child received: %s\n", buffer);
    }

    // Close and unlink the message queue
    mq_close(mq);
    mq_unlink(QUEUE_NAME);

    return 0;
}
--------------------------------------------------------------------------------------
